<!DOCTYPE HTML>
<html style="font-size: 16px;">
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <title></title>
    
    
    <link rel='icon' type='image/x-icon' href='/favicon.ico'>
    <style>
        
    </style>
    <link rel='stylesheet' href='https://share.note.sx/css/54/5407c3c039aa760b25e7831ef9b48900.css'>
    <link rel='stylesheet' href='https://share.note.sx/assets/global-note-styles.css'>
    <script src='https://share.note.sx/assets/app.js'></script>
    
</head>
<body class="theme-dark mod-windows is-frameless is-maximized is-hidden-frameless obsidian-app show-inline-title show-ribbon show-view-header is-focused share-note-plugin" style="--zoom-factor: 1; --font-text-size: 16px; --indent-size: 4;">
<div class='app-container'>
    <div class='horizontal-main-container'>
        <div class='workspace'>
            <div class='workspace-split mod-vertical mod-root'>
                <div class='workspace-leaf mod-active'>
                    <div class='workspace-leaf-content'>
                        <div class='view-content'>
                            <div class='markdown-reading-view' style='height:100%;width:100%;'>
                                <div class="markdown-preview-view markdown-rendered node-insert-event is-readable-line-width allow-fold-headings allow-fold-lists show-indentation-guide show-properties">
                                    <div class='markdown-preview-sizer markdown-preview-section'>
                                        <div class="markdown-preview-pusher" style="width: 1px; height: 0.1px;"></div>
                                        <div id="template-user-data">Encrypted note</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class='status-bar' style='display:flex !important;position:fixed !important;'>
        <div class='status-bar-item'>
            <span class='status-bar-item-segment'><a href='https://note.sx/' target='_blank'>Share Note</a> for Obsidian</span>
            <span id='theme-mode-toggle' class='status-bar-item-segment'>ðŸŒ“</span>
        </div>
    </div>
</div>
<div id='encrypted-data' style='display: none'>{"ciphertext":["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"]}</div>
<script>function base64ToArrayBuffer (base64) {
  const binaryString = atob(base64)
  const bytes = new Uint8Array(binaryString.length)
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i)
  }
  return bytes.buffer
}

function indexToIv (int) {
  const iv = new Uint8Array(12)
  for (let i = 0; i < iv.length; i++) {
    iv[i] = int % 256
    int = Math.floor(int / 256)
  }
  return iv
}

async function decryptString (ciphertextArray, secret) {
  const aesKey = await window.crypto.subtle.importKey('raw', base64ToArrayBuffer(secret), {
    name: 'AES-GCM',
    length: 256
  }, false, ['decrypt'])

  const plaintext = []
  for (let index = 0; index < ciphertextArray.length; index++) {
    const ciphertextChunk = ciphertextArray[index]
    const ciphertextBuf = base64ToArrayBuffer(ciphertextChunk)
    const plaintextChunk = await window.crypto.subtle
      .decrypt({
        name: 'AES-GCM',
        iv: indexToIv(index)
      }, aesKey, ciphertextBuf)
    plaintext.push(new TextDecoder().decode(plaintextChunk))
  }
  return plaintext.join('')
}

/*
* Decrypt the original note content
*/
const encryptedData = document.getElementById('encrypted-data').innerText.trim()
const payload = encryptedData ? JSON.parse(encryptedData) : ''
const secret = window.location.hash.slice(1) // Taken from the URL # parameter
if (payload && secret) {
  decryptString(payload.ciphertext, secret)
    .then(text => {
      // Inject the user's data
      const data = JSON.parse(text)
      const contentEl = document.getElementById('template-user-data')
      if (contentEl) contentEl.outerHTML = data.content
      document.title = data.basename
      initDocument()
    })
    .catch(() => {
      const contentEl = document.getElementById('template-user-data')
      if (contentEl) contentEl.innerHTML = 'Unable to decrypt using this key.'
    })
}
</script>
</body>
</html>
